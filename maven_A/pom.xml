<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.zhouzz.maven</groupId>
    <artifactId>maven_A</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>

        <!-- 引入maven_B项目依赖 这样maven_B 里面的依赖也可以引入进来使用-->
        <!-- 只有依赖范围是 compile 才可以进行传递-->

        <!--配置优先配置原则注意idea显示问题，也可以通过手动依赖排除原则-->

        <dependency>
            <groupId>com.zhouzz.maven</groupId>
            <artifactId>maven_C</artifactId>
            <version>1.0-SNAPSHOT</version>
            <!--进行手动依赖排除以后虽然mavenC 项目在前，但是经过排除以后可是使用 mavenB里面druid依赖-->
            <exclusions>
                <exclusion>
                    <groupId>com.alibaba</groupId>
                    <artifactId>druid</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.zhouzz.maven</groupId>
            <artifactId>maven_B</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!--  引入junit5组合依赖-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.17.2</version>
        </dependency>


        <!--maven 冲突讲究短路原则，依赖层级越少优先级就越高 第一原则-->
        <!--maven 第一原则一样，先声明就以谁为准 第二原则-->

    </dependencies>

</project>